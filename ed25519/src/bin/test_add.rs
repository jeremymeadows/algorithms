use num_bigint::BigInt;
use num_traits::{One, Zero};
use std::str::FromStr;

fn main() {
    #[allow(non_snake_case)]
    let P: &BigInt = &(BigInt::from(2).pow(255) - 19);
    #[allow(non_snake_case)]
    let D: &BigInt = &(BigInt::from(121666).modpow(&(P.clone() - 2), P) - 1);

    assert_eq!(
        // (BigInt::from(2) * BigInt::from(-7)) % P,
        (BigInt::from(2) * BigInt::from(-7)).modpow(&BigInt::one(), P),
        BigInt::from_str("57896044618658097711785492504343953926634992332820282019728792003956564819935").unwrap()
    );
    assert_eq!(
        ((BigInt::from(2) * BigInt::from_str("-472268759938110625622824785352915578001432258900265237190564369304728646195033505047516790369922900318679953813930015786830629522119352625245844870504700").unwrap())).modpow(&BigInt::one(), P),
        BigInt::from_str("23424556127314336091911683597650811878694366696912144165000134594930803280931").unwrap()
    );

    let point_add = |p: (&BigInt, &BigInt, &BigInt, &BigInt),
                     q: (&BigInt, &BigInt, &BigInt, &BigInt)|
     -> (BigInt, BigInt, BigInt, BigInt) {
        let a = ((p.1 - p.0) * (q.1 - q.0)).modpow(&BigInt::one(), P);
        let b = ((p.1 + p.0) * (q.1 + q.0)).modpow(&BigInt::one(), P);
        let c = (BigInt::from(2) * p.3 * q.3 * D).modpow(&BigInt::one(), P);
        let d = (BigInt::from(2) * p.2 * q.2).modpow(&BigInt::one(), P);

        assert_eq!(a, BigInt::from_str("54274161611129503457027863065500424212778869171403605487583815842836463102445").unwrap());
        assert_eq!(b, BigInt::from_str("50145158298674873522890648925795849724830061647957826910841502528668648986364").unwrap());
        assert_eq!(c, BigInt::from_str("0").unwrap());
        assert_eq!(d, BigInt::from_str("23424556127314336091911683597650811878694366696912144165000134594930803280931").unwrap());

        let e = &b - &a;
        let f = &d - &c;
        let g = d + c;
        let h = b + a;
        (&e * &f, &g * &h, f * g, e * h)
    };

    assert_eq!(*P, BigInt::from_str("57896044618658097711785492504343953926634992332820282019728792003956564819949").unwrap());
    assert_eq!(*D, BigInt::from_str("37095705934669439343138083508754565189542113879843219016388785533085940283555").unwrap());

    let sum = point_add(
        (
            &BigInt::from_str("-296018569523652896372234514327709550206908554287152058624460862838859047041084022801327206127550044265769833862414983365876661076483822655155324979117350").unwrap(),
            &BigInt::from_str("1490495321877056891969153563203901731061912970822103855338626923326930450369546055809989262026333609603664456667855626969875010168057827705323189208562226").unwrap(),
            &BigInt::from_str("-472268759938110625622824785352915578001432258900265237190564369304728646195033505047516790369922900318679953813930015786830629522119352625245844870504700").unwrap(),
            &BigInt::from_str("934244079836156744814377949647390897099953823983631381324122244125069081065138972390096358496487455289554769813310888065787613665947803319614067579747813").unwrap(),
        ),
        (&BigInt::zero(), &BigInt::one(), &BigInt::one(), &BigInt::zero())
    );

    println!("{:?}", sum);
    assert_eq!(sum, (
        BigInt::from_str("-96720069842460291797938870517886859962485740142320070423613995671740497718858311798775495828584144407663446509877413375795620722700305351282730487751411").unwrap(),
        BigInt::from_str("2445976220003203967096891697700621578629252374160621852127530226297368368906708146503108862027047256192963442974854511196621032246716669431448327848201179").unwrap(),
        BigInt::from_str("548709829761699606984552933499151766797648929301152071422878665786736660760034763091932596573004173478455124607409578148995930233169982001819914108226761").unwrap(),
        BigInt::from_str("-431147717791841962355427150511426056796771870726164855195374766048111118495319433478986200978311134275491162180364095474437485097374411865782309907037529").unwrap(),
    ));
}

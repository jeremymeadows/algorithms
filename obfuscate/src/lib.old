pub use proc_macros::obfuscate;
use std::fmt::{Debug, Display, Formatter};
use std::marker::PhantomData;
use std::str::FromStr;

pub struct Obfuscated<T>(&'static [u8], PhantomData<T>);

impl Obfuscated<String> {
    pub const fn new(data: &'static [u8]) -> Obfuscated<String> {
        Obfuscated(data, PhantomData)
    }

    pub fn get(&self) -> String {
        let data = self
            .0
            .iter()
            .enumerate()
            .map(|(i, e)| i as u8 ^ !e)
            .collect::<Vec<_>>();
        String::from_utf8(data).unwrap()
    }
}

impl Display for Obfuscated<String> {
    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
        write!(f, "{}", self.get())
    }
}

impl Debug for Obfuscated<String> {
    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
        write!(
            f,
            "Obfuscated({:?}, {})",
            self.0,
            String::from_utf8_lossy(self.0)
        )
    }
}

macro_rules! impl_int {
    ($t:ty) => {
        impl Obfuscated<$t> {
            pub const fn new(data: &'static [u8]) -> Obfuscated<$t> {
                Obfuscated(data, PhantomData)
            }

            pub fn get(&self) -> $t {
                let data = self
                    .0
                    .iter()
                    .enumerate()
                    .map(|(i, e)| i as u8 ^ !e)
                    .collect::<Vec<_>>();
                <$t>::from_str(&String::from_utf8(data).unwrap()).unwrap()
            }
        }

        impl Display for Obfuscated<$t> {
            fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
                write!(f, "{}", self.get())
            }
        }

        impl Debug for Obfuscated<$t> {
            fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
                write!(f, "Obfuscated({:?}, {})", self.0, self.get())
            }
        }
    };
}

impl_int!(u8);
impl_int!(u16);
impl_int!(u32);
impl_int!(u64);
impl_int!(u128);
impl_int!(i8);
impl_int!(i16);
impl_int!(i32);
impl_int!(i64);
impl_int!(i128);

#[cfg(test)]
mod tests {}
